#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node* prev;
};

void insertAtBeginning(Node*& head, int new_data) {
    Node* new_node = new Node();
    new_node->data = new_data;
    new_node->next = head;
    new_node->prev = nullptr;
    
    if (head != nullptr) {
        head->prev = new_node;
    }
    
    head = new_node;
}

void append(Node*& head, int new_data) {
    Node* new_node = new Node();
    new_node->data = new_data;
    new_node->next = nullptr;
    new_node->prev = nullptr;
    
    if (head == nullptr) {
        head = new_node;
        return;
    }
    
    Node* last = head;
    while (last->next != nullptr) {
        last = last->next;
    }
    last->next = new_node;
    new_node->prev = last;
}

void insertBefore(Node*& head, Node* next_node, int new_data) {
    if (next_node == nullptr) {
        cout << "The given next node cannot be NULL" << endl;
        return;
    }
    
    Node* new_node = new Node();
    new_node->data = new_data;
    new_node->prev = next_node->prev;
    new_node->next = next_node;
    
    if (next_node->prev != nullptr) {
        next_node->prev->next = new_node;
    } else {
        head = new_node;
    }
    next_node->prev = new_node;
}

void printList(Node* head) {
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* head = nullptr;
    
    append(head, 10);
    append(head, 20);
    append(head, 30);
    
    insertAtBeginning(head, 5);
    
    insertBefore(head, head->next->next, 15); // Insert 15 before node with value 20
    
    printList(head);
    
    return 0;
}
